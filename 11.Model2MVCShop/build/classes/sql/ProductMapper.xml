<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductMapper">
 	
 	
	<resultMap id="productSelectMap" type="product">
		<result property="prodNo" 			column="prod_no" 			jdbcType="NUMERIC"/>
		<result property="prodName"	column="prod_name" 		jdbcType="VARCHAR" />
		<result property="prodDetail" 	column="prod_detail" 		jdbcType="VARCHAR" />
		<result property="manuDate" 				column="manufacture_day" 					jdbcType="VARCHAR" />
		<result property="price" 				column="price" 					jdbcType="NUMERIC" />
		<result property="fileName" 			column="image_file" 		jdbcType="VARCHAR" />
		<result property="regDate" 				column="reg_date" 					jdbcType="DATE" />
		<result property="proTranCode" 				column="tran_status_code" 					jdbcType="CHAR" />
		<result property="stock" 				column="stock" 					jdbcType="NUMERIC" />
		<result property="likeIt" 				column="like_it" 					jdbcType="NUMERIC" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addProduct"		parameterType="product" >
		INSERT
		INTO product( prod_no , prod_name , prod_detail , manufacture_day , price , image_file , reg_date , stock, like_it ) 
		VALUES	 ( SEQ_product_prod_no.NEXTVAL , #{prodName:VARCHAR} , #{prodDetail:VARCHAR} , #{manuDate:VARCHAR} , 
							#{price:NUMERIC} , #{fileName:VARCHAR} , SYSDATE, #{stock:NUMERIC}, 0 )
	</insert>
	 
	<update id="update_Like" parameterType="int">
	 	UPDATE product
	 	<set>
	 		like_it = like_it + 1
	 	</set>
		WHERE prod_no = #{prodNo}
	</update>
	 
	<update id="update_Unlike" parameterType="int">
	 	UPDATE product
	 	<set>
	 		like_it = like_it - 1
	 	</set>
	 	WHERE prod_no = #{prodNo}
	</update>
	 
	<select    id="select_Like" parameterType="int" resultType="int">
	 	SELECT
	 	like_it
	 	FROM product
		WHERE prod_no = #{prodNo}
	</select>
	 
	<!-- SQL : SELECT ONE -->
	<select 	id="getProduct"	parameterType="int"	resultMap="productSelectMap">
		SELECT
		prod_no , prod_name , prod_detail , manufacture_day , price , image_file , reg_date, stock, like_it	
		FROM product
		WHERE prod_no = #{value}
	</select>
	 
	<!-- SQL : UPDATE -->
	<update	id="updateProduct"	parameterType="product" >
	   	UPDATE product
	   	<set>
	   		price 			= #{price} ,
			prod_detail		= #{prodDetail},
			prod_name		= #{prodName} ,
			manufacture_day = #{manuDate} ,
			image_file 		= #{fileName} ,
			stock			= #{stock}
	   	</set>
	   	WHERE prod_no = #{prodNo}
	</update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getProductList"  parameterType="search"	resultMap="productSelectMap">
	  	SELECT * 
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT p.prod_no, p.prod_name, p.prod_detail, p.manufacture_day, p.price, p.image_file, p.reg_date, p.stock, t.tran_status_code  
	  									FROM product p, transaction t
											<if test="searchCondition != null">
												<trim prefix="WHERE" prefixOverrides="AND | OR">
													<if test="searchCondition == 0 and searchKeyword !='' ">
										 				p.prod_no LIKE '%${searchKeyword}%'
													</if>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				p.prod_name LIKE '%${searchKeyword}%'
													</if>
													<if test="searchCondition == 2 and searchKeyword !='' ">
										 				p.price LIKE '%${searchKeyword}%'
													</if>
													<if test="searchCondition != null">
														AND p.prod_no=t.prod_no(+)
													</if>
												</trim>
											</if>
											<if test="searchCondition == null">
												<where>
												p.prod_no=t.prod_no(+)
												</where>
											</if>
											ORDER BY prod_no ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	</select>
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	<select  id="getTotalCount"  parameterType="search"	 resultType="int">
		SELECT COUNT(*)
	  	FROM(	SELECT	prod_no , prod_name , prod_detail , manufacture_day , price , image_file , reg_date, stock	
				FROM product
						<if test="searchCondition != null">
							<where>
								<if test="searchCondition == 0 and searchKeyword !='' ">
					 			prod_no LIKE '%${searchKeyword}%'
								</if>
								<if test="searchCondition == 1 and searchKeyword !='' ">
					 			prod_name LIKE '%${searchKeyword}%'
								</if>
								<if test="searchCondition == 2 and searchKeyword !='' ">
					 			price LIKE '%${searchKeyword}%'
								</if>
							</where>
						</if> ) countTable						
	</select>
	 
</mapper>